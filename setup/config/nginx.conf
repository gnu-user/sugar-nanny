user nanny www-data;
worker_processes 1;
pid /var/run/nginx.pid;

events {
	worker_connections 19000;
	multi_accept on;
}

worker_rlimit_nofile 200000;

http {
	# Protect against SSLv3 POODLE attacks
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

	# Protect against Logjam attack
	ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
	ssl_prefer_server_ciphers on;
	ssl_dhparam /root/.certs/dhparams.pem;

	add_header X-Frame-Options SAMEORIGIN;
	charset utf-8;
	 
	open_file_cache max=200000 inactive=20s;
	open_file_cache_valid 30s;
	open_file_cache_min_uses 2;
	open_file_cache_errors on;
	 
	server_tokens off;
	include       /etc/nginx/mime.types;
	default_type  application/octet-stream;
	 
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
	                  '$status $body_bytes_sent "$http_referer" '
	                  '"$http_user_agent" "$http_x_forwarded_for"';
	 
	#  Buffer log writes to speed up IO, or disable them altogether
	# access_log /var/log/nginx/access.log main buffer=16k;
	access_log off;
	 
	#  Sendfile copies data between one FD and other from within the kernel.
	#  More efficient than read() + write(), since the requires transferring data to and from the user space.
	sendfile on;
	 
	#  Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet,
	#  instead of using partial frames. This is useful for prepending headers before calling sendfile,
	#  or for throughput optimization.
	tcp_nopush on;
	 
	#  don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
	tcp_nodelay on;
	 
	#  Timeout for keep-alive connections. Server will close connections after this time.
	keepalive_timeout 30;
	 
	#  Number of requests a client can make over the keep-alive connection. This is set high for testing.
	keepalive_requests 100000;
	 
	#  allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
	reset_timedout_connection on;
	 
	#  send the client a "request timed out" if the body is not loaded by this time. Default 60.
	client_body_timeout 10;
	 
	#  If the client stops reading data, free up the stale client connection after this much time. Default 60.
	send_timeout 2;
	 
	# unsure what this does - recommended here:
	# http://www.howtoforge.com/configuring-your-lemp-system-linux-nginx-mysql-php-fpm-for-maximum-performance
	types_hash_max_size 2048;
	 
	#  Compression. Reduces the amount of data that needs to be transferred over the network
	gzip on;
	gzip_static on;
	gzip_vary on;
	gzip_min_length 10240;
	gzip_comp_level   6;
	gzip_proxied expired no-cache no-store private auth;
	gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
	gzip_disable "MSIE [1-6]\.";
	gzip_buffers 16 8k;
	 
	#caching settings
	#fastcgi_cache_path /var/cache/nginx2 levels=1:2 keys_zone=microcache:5m max_size=1000m inactive=30d;

	##
	# set client body size to 1000M #
	##
	client_max_body_size 1000M;

	##
	# Virtual Host Configs
	##

	#include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;

	server_names_hash_bucket_size 64;
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
# 
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
